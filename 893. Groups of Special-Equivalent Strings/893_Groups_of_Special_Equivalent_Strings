class Solution {
    public int numSpecialEquivGroups(String[] A) {
        return numSpecialEquivGroupsWithArray(A);
    }
    public int numSpecialEquivGroupsWithArray(String [] strings) {
        Set<String> set = new HashSet<>();
        for (String str: strings) {
            int[] evenCharMap = new int[26];
            int[] oddCharMap = new int[26];
            
            for (int i = 0; i < str.length(); i++) {
                if (i % 2 == 0) {
                    evenCharMap[str.charAt(i) - 'a'] ++;
                } else {
                    oddCharMap[str.charAt(i) - 'a'] ++;
                }
            }
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < evenCharMap.length; j++) {
                sb.append(evenCharMap[j]);
                sb.append(oddCharMap[j]);
            }
            set.add(sb.toString());
        }
        return set.size();
    }
    public int numSpecialEquivGroupsWithCollections(String[] strings) {
        Set<String> set = new HashSet<>();
        for (String str: strings) {
            List<Character> evenChars = new ArrayList<>();
            List<Character> oddChars = new ArrayList<>();
            
            // 1. string split into two list: even \ odd.
            for (int i = 0; i < str.length(); i++) {
                if (i % 2 == 0) {
                    evenChars.add(str.charAt(i));
                } else {
                    oddChars.add(str.charAt(i));
                }
            }
            
            // 2. sorting list .
            Collections.sort(evenChars);
            Collections.sort(oddChars);
            
            // 3. concating two char list .
            StringBuilder sb = new StringBuilder();
            for (Character c: evenChars) {
                sb.append(c);
            }
            for (Character c: oddChars) {
                sb.append(c);
            }
            // 4 add the final sorted string to set.
            set.add(sb.toString());
        }
        return set.size();
    }
}